// <auto-generated />
using System;
using DB_cinema;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DB_cinema.Migrations
{
    [DbContext(typeof(AlejaCinemaContext))]
    [Migration("20230429082358_fixing-tag-chair")]
    partial class fixingtagchair
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DB_cinema.Chair", b =>
                {
                    b.Property<int>("ChairID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChairID"));

                    b.Property<int>("LevelID")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Row")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("ChairID");

                    b.HasIndex("LevelID");

                    b.ToTable("Aleja_Chairs", (string)null);
                });

            modelBuilder.Entity("DB_cinema.LevelChair", b =>
                {
                    b.Property<int>("LevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("LevelID");

                    b.ToTable("Aleja_Levels_Chair", (string)null);
                });

            modelBuilder.Entity("DB_cinema.Sale", b =>
                {
                    b.Property<int>("SaleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("SaleValue")
                        .HasColumnType("float");

                    b.Property<int>("ShowingID")
                        .HasColumnType("int");

                    b.HasKey("SaleID");

                    b.HasIndex("ShowingID");

                    b.ToTable("Aleja_Sales", (string)null);
                });

            modelBuilder.Entity("DB_cinema.Showing", b =>
                {
                    b.Property<int>("ShowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShowID"));

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("hour")
                        .HasColumnType("int");

                    b.Property<int>("minutes")
                        .HasColumnType("int");

                    b.HasKey("ShowID");

                    b.ToTable("Aleja_Showings", (string)null);
                });

            modelBuilder.Entity("DB_cinema.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("IdChair")
                        .HasColumnType("int");

                    b.Property<int>("IdShowing")
                        .HasColumnType("int");

                    b.Property<int?>("SaleID")
                        .HasColumnType("int");

                    b.HasKey("TicketId");

                    b.HasIndex("IdChair");

                    b.HasIndex("IdShowing");

                    b.HasIndex("SaleID");

                    b.ToTable("Aleja_Tickets", (string)null);
                });

            modelBuilder.Entity("DB_cinema.Chair", b =>
                {
                    b.HasOne("DB_cinema.LevelChair", "Level")
                        .WithMany()
                        .HasForeignKey("LevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("DB_cinema.Sale", b =>
                {
                    b.HasOne("DB_cinema.Showing", "Show")
                        .WithMany()
                        .HasForeignKey("ShowingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("DB_cinema.Ticket", b =>
                {
                    b.HasOne("DB_cinema.Chair", "Chair")
                        .WithMany()
                        .HasForeignKey("IdChair")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB_cinema.Showing", "Show")
                        .WithMany()
                        .HasForeignKey("IdShowing")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DB_cinema.Sale", null)
                        .WithMany("Tickets")
                        .HasForeignKey("SaleID");

                    b.Navigation("Chair");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("DB_cinema.Sale", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
